
#include "Common.glcs"

DECL_IMAGE( image2D, rgba8, writeonly, outDiffuseImage );

uniform float2	unPosition;
uniform float2	unScale;


float4 Rainbow (float h, const float s, const float v)
{
	h = (1.0 - h) * 0.65;
	return float4( HSVtoRGB( float3(h, s, v) ), 1.0 );
}

float DiffuseMap (const float2 coord)
{
	return PerlinNoise2D( coord, 0.2, 3.0, 0.35, 6, 5 );
}


void main ()
{
	const int2	border	= int2(1);

	int2	img_coord	= GetGlobalCoord().xy;
	int2	img_size	= GetGlobalSize().xy;

	float2	texcoord	= GetGlobalCoordUNorm().xy * unScale + unPosition;
	float4	color		= float4( 0.0, 1.0, 0.0, 1.0 );


	if ( AnyLess( img_coord, border ) or
		 AnyGreater( img_coord, img_size - border -1 ) )
	{
		color = float4( 1.0 );
	}
	else
	{
		color = Rainbow( ToUNorm(DiffuseMap( texcoord )), 1.0, 1.0 );
	}

	imageStore( outDiffuseImage, img_coord, color );
}
