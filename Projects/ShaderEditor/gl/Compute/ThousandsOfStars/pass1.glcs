
#include "Common.glcs"

DECL_IMAGE( image2D, rgba8, writeonly, outImage );

uniform float	unGlobalTime;


float Hash11 (float a)
{
    return fract( sin(a) * 10403.9 );
}

float2 Hash22 (float2 p)
{
    float2 q = float2( dot( p, float2(127.1,311.7) ), 
						dot( p, float2(269.5,183.3) ) );
    
	return fract( sin(q) * 43758.5453 );
}

float Hash21 (float2 p)
{
    return fract( sin( p.x + p.y * 64.0 ) * 104003.9 );
}

bool Hash1b (float x)
{
    return Hash11(x) > 0.5;
}


float2 CenterOfVoronoiCell (float2 local, float2 global, float time)
{
    float2 point = local + global;
    return local +
        	float2( IsEven( int(point.y) ) ? 0.5 : 0.0, 0.0 ) +		// hex
        	(sin( time * Hash22( point ) * 0.628 ) * 0.5 + 0.5);	// animation
}

float ValueOfVoronoiCell (float2 coord)
{
    return Hash21( coord );
}


float2 VoronoiCircles (in float2 coord, float freq, float time, float radiusScale)
{
    const int radius = 1;
    
    float2 point = coord * freq;
    float2 ipoint = floor( point );
    float2 fpoint = fract( point );
    
    float2 center = fpoint;
    float2 icenter = float2(0.0);
    
    float md = 2147483647.0;
	float mr = 2147483647.0;
    
	// find nearest circle
	for (int y = -radius; y <= radius; ++y)
	for (int x = -radius; x <= radius; ++x)
	{
        float2 cur = float2(x, y);
		float2 c = CenterOfVoronoiCell( float2(cur), ipoint, time );
		float d = dot( c - fpoint, c - fpoint );

		if ( d < md )
		{
			md = d;
			center = c;
			icenter = cur;
		}
	}
    
	// calc circle radius
	for (int y = -radius; y <= radius; ++y)
	for (int x = -radius; x <= radius; ++x)
	{
        if ( x == 0 && y == 0 )
            continue;
        
        float2 cur = icenter + float2(x, y);
		float2 c = CenterOfVoronoiCell( float2(cur), ipoint, time );
		float d = dot( c - fpoint, c - fpoint );
		
		if ( d < mr )
			mr = d;
	}
    
    md = sqrt( md );
	mr = sqrt( mr ) * 0.5 * radiusScale;
    
	if ( md < mr )
		return float2( md / mr, ValueOfVoronoiCell( icenter + ipoint ) );

	return float2( 0.0, -2.0 );
}


float3 Mix3 (float3 color1, float3 color2, float3 color3, float a)
{
    if ( a < 0.5 )
        return mix( color1, color2, a * 2.0 );
    else
        return mix( color2, color3, a * 2.0 - 1.0 );
}

float3 StarColor (float value)
{
    return mix( float3(1.0, 0.5, 0.0), float3(0.0, 0.7, 1.0), value );
}

float4 Star (float2 value)
{
    if ( value.y < -1.0 )
        return float4( 0.0 );
    
    float alpha;
    
    if ( Hash1b( value.y ) )
        alpha = 1.0 / (value.x * value.x * 16.0) - 0.07;
    else
        alpha = 1.0 / (value.x * 8.0) - 0.15;
    
    return clamp( float4( Mix3( float3(0.0), StarColor( value.y ), float3(1.0), alpha ), alpha ), 0.0, 1.0 );
}


float4 StarLayers (float2 coord, float time)
{
    float4 color = Star( VoronoiCircles( coord, 1.25, time * 0.07274, 0.5 ) );
    color += Star( VoronoiCircles( coord + float2(2.372), 10.0, time * 0.229 + 2.496, 0.75 ) );
    color += Star( VoronoiCircles( coord + float2(6.518), 30.0, time * 0.57 + 8.513, 0.9 ) ) * 0.85;
    color += Star( VoronoiCircles( coord + float2(3.584), 60.0, time + 2.649, 1.0 ) ) * 0.75;
    color += Star( VoronoiCircles( coord + float2(0.493), 60.0, time + 8.624, 1.0 ) ) * 0.75;
    
    return color;
}


void main ()
{
	int2	img_coord	= GetGlobalCoord().xy;
	float2	coord		= GetGlobalCoordUNormCorrected();
	float4	color		= float4(0.0);
	
    coord += float2(1.0) * unGlobalTime * 0.01;

    color = StarLayers( coord, unGlobalTime + 412.54 );

	imageStore( outImage, img_coord, color );
}
