/*
	Axis aligned bounding box.
*/

[HEADER]


struct AABBox
{
	real3	min;
	real3	max;
};

bool  AABBox_IsInside (const AABBox box, const real3 pos);

real3 AABBox_Center (const AABBox box);
real3 AABBox_Size (const AABBox box);
real3 AABBox_GetPointInBox (const AABBox box, const real3 interpolation);

// for particles
real3 AABBox_Wrap (const AABBox box, const real3 pos);
real3 AABBox_Clamp (const AABBox box, const real3 pos);
bool  AABBox_Rebound (const AABBox box, inout real3 pos, inout real3 vel);



//-----------------------------------------------------------------------------
[SOURCE]

#import "Core/Common/Cmp.glcs"
#import "Core/Math/Math.glcs"


bool AABBox_IsInside (const AABBox box, const real3 pos)
{
	return AllGreaterEqual( pos, box.min ) and AllLessEqual( pos, box.max );
}


real3 AABBox_Center (const AABBox box)
{
	return (box.min + box.max) * 0.5;
}


real3 AABBox_Size (const AABBox box)
{
	return (box.max - box.min);
}


real3 AABBox_GetPointInBox (const AABBox box, const real3 interpolation)
{
	return AABBox_Center(box) + AABBox_Size(box) * interpolation * 0.5;
}


real3 AABBox_Wrap (const AABBox box, const real3 pos)
{
	return Wrap( pos, box.min, box.max );
}


real3 AABBox_Clamp (const AABBox box, const real3 pos)
{
	return Clamp( pos, box.min, box.max );
}


bool AABBox_Rebound (const AABBox box, inout real3 pos, inout real3 vel)
{
	if ( AABBox_IsInside( box, pos ) )
		return false;

	pos = AABBox_Clamp( box, pos );
	vel = -vel;

	return true;
}
