
// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
uint _Random1_hash (uint x) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}

// Compound versions of the hashing algorithm I whipped together.
uint _Random1_hash (in uint2 v) {
	return _Random1_hash( v.x ^ _Random1_hash(v.y) );
}

uint _Random1_hash (in uint3 v) {
	return _Random1_hash( v.x ^ _Random1_hash(v.y) ^ _Random1_hash(v.z) );
}

uint _Random1_hash (in uint4 v) {
	return _Random1_hash( v.x ^ _Random1_hash(v.y) ^ _Random1_hash(v.z) ^ _Random1_hash(v.w) );
}

// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float _Random1_floatConstruct (uint m) {
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32

    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          // Add fractional part to 1.0

    float  f = uintBitsToFloat( m );       // Range [1:2]
    return f - 1.0;                        // Range [0:1]
}

// Pseudo-random value in half-open range [0:1].
float Random_v1 (float x)		{ return _Random1_floatConstruct( _Random1_hash( floatBitsToUint( x ) ) ); }
float Random_v1 (in float2 v)	{ return _Random1_floatConstruct( _Random1_hash( floatBitsToUint( v ) ) ); }
float Random_v1 (in float3 v)	{ return _Random1_floatConstruct( _Random1_hash( floatBitsToUint( v ) ) ); }
float Random_v1 (in float4 v)	{ return _Random1_floatConstruct( _Random1_hash( floatBitsToUint( v ) ) ); }



float Random_v2 (in float2 co) {
    return fract( sin( dot( co.xy, float2( 12.9898, 78.233 ) ) ) * 43758.5453 );
}


bool RandomBool (in float x)	{ return Random_v1( x ) > 0.5; }
bool RandomBool (in float2 x)	{ return Random_v1( x ) > 0.5; }
bool RandomBool (in float3 x)	{ return Random_v1( x ) > 0.5; }
bool RandomBool (in float4 x)	{ return Random_v1( x ) > 0.5; }
