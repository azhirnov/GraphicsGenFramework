/*
	Base functions.

	Options:
		USR_COMPUTE_DEBUG	- enable debug checks.
		COMPUTE_FP			- float precission.
*/

//---------------------------------------------------------
//						[HEADER]
//---------------------------------------------------------


#if !(GL_core_profile && (__VERSION__ > 400))

#	define STATIC_ASSERT( _condition_ )		static_assert( _condition_, #_condition_ )

# if !defined( COMPUTE_FP )
#	define COMPUTE_FP	32
# endif

#endif


// Defines //
#if !defined(STATIC_ASSERT)
# if USR_COMPUTE_DEBUG
#	define __UNIQUE_ASSERT_NAME( a )		a##__LINE__
#	define STATIC_ASSERT( _condition_ )		enum { __UNIQUE_ASSERT_NAME( __static_assert_ ) = (1 / ((_condition_) ? 1 : 0)) }
# else
#	define STATIC_ASSERT( _condition_ )
# endif
#endif

//#define IN			in
//#define OUT			inout

#define not			!
#define or			||
#define and			&&

#define CountOf( _arr_ )	(_arr_).length

#define bool2		bvec2
#define bool3		bvec3
#define bool4		bvec4

#define int2		ivec2
#define int3		ivec3
#define int4		ivec4

#define uint2		uvec2
#define uint3		uvec3
#define uint4		uvec4

#define float2		vec2
#define float3		vec3
#define float4		vec4
#define float2x2	mat2x2
#define float3x3	mat3x3
#define float4x4	mat4x4

#define double2		dvec2
#define double3		dvec3
#define double4		dvec4
#define double2x2	dmat2x2
#define double3x3	dmat3x3
#define double4x4	dmat4x4



// Real type //
#if (COMPUTE_FP == 32)

#define real		float
#define real2		float2
#define real3		float3
#define real4		float4
#define real2x2		float2x2
#define real3x3		float3x3
#define real4x4		float4x4

#elif (COMPUTE_FP == 64)

#define real		double
#define real2		double2
#define real3		double3
#define real4		double4
#define real2x2		double2x2
#define real3x3		double3x3
#define real4x4		double4x4

#else

#	error COMPUTE_FP not defined!

#endif	// COMPUTE_FP



// Utils //
int   GetGlobalID ();
int   GetGlobalSize ();

real  GetGlobalIdUNorm ();
real  GetGlobalIdSNorm ();

int2  GetGlobalCoord2D ();
int3  GetGlobalCoord3D ();

int2  GetGlobalSize2D ();
int3  GetGlobalSize3D ();

real2  GetGlobalCoord2DUNorm ();
real3  GetGlobalCoord3DUNorm ();

real2  GetGlobalCoord2DSNorm ();
real3  GetGlobalCoord3DSNorm ();

real2 GetGlobalSize2DScaled (real2 scale);
real3 GetGlobalSize3DScaled (real3 scale);

real2 GetGlobalCoord2DTransformed (real2 scale, real2 bias);
real3 GetGlobalCoord3DTransformed (real3 scale, real3 bias);

int2  GetGlobalCoord2DTransformedI (real2 scale, real2 bias);
int3  GetGlobalCoord3DTransformedI (real3 scale, real3 bias);

real2 GetGlobalCoord2DTransformedUNorm (real2 scale, real2 bias);
real3 GetGlobalCoord3DTransformedUNorm (real3 scale, real3 bias);

real2 GetGlobalCoord2DTransformedSNorm (real2 scale, real2 bias);
real3 GetGlobalCoord3DTransformedSNorm (real3 scale, real3 bias);

real2 GetGlobalCoord2DTransformedUNormCorrected (real scale, real2 bias);
real2 GetGlobalCoord2DTransformedSNormCorrected (real scale, real2 bias);



//---------------------------------------------------------
//						[SOURCE]
//---------------------------------------------------------

int GetGlobalID ()
{
	int3 coord = GetGlobalCoord3D();
	int3 size  = GetGlobalSize3D();
	return coord.x + (coord.y * size.x) + (coord.z * size.x * size.y);
}

int GetGlobalSize ()
{
	int3 size  = GetGlobalSize3D();
	return size.x * size.y * size.z;
}

real GetGlobalIdUNorm ()
{
	return real(GetGlobalID()) / real(GetGlobalSize()-1);
}

real GetGlobalIdSNorm ()
{
	return GetGlobalIdUNorm() * 2.0 - 1.0;
}

int2  GetGlobalCoord2D ()
{
	return GetGlobalCoord3D().xy;
}

int3  GetGlobalCoord3D ()
{
	return int3( gl_GlobalInvocationID );
}

int2  GetGlobalSize2D ()
{
	return GetGlobalSize3D().xy;
}

int3  GetGlobalSize3D ()
{
	return int3( gl_NumWorkGroups * gl_WorkGroupSize );
}

real2  GetGlobalCoord2DUNorm ()
{
	return GetGlobalCoord3DUNorm().xy;
}

real3  GetGlobalCoord3DUNorm ()
{
	return real3( GetGlobalCoord3D() ) / real3( GetGlobalSize3D()-1 );
}

real2  GetGlobalCoord2DSNorm ()
{
	return GetGlobalCoord2DUNorm() * 2.0 - 1.0;
}

real3  GetGlobalCoord3DSNorm ()
{
	return GetGlobalCoord3DUNorm() * 2.0 - 1.0;
}

real2 GetGlobalSize2DScaled (real2 scale)
{
	return real2( GetGlobalSize2D() ) * scale;
}

real3 GetGlobalSize3DScaled (real3 scale)
{
	return real3( GetGlobalSize3D() ) * scale;
}

real2 GetGlobalCoord2DTransformed (real2 scale, real2 bias)
{
	return real2( GetGlobalCoord2D() ) * scale + bias;
}

real3 GetGlobalCoord3DTransformed (real3 scale, real3 bias)
{
	return real3( GetGlobalCoord3D() ) * scale + bias;
}

int2  GetGlobalCoord2DTransformedI (real2 scale, real2 bias)
{
	return int2( round( GetGlobalCoord2DTransformed( scale, bias ) ) );
}

int3  GetGlobalCoord3DTransformedI (real3 scale, real3 bias)
{
	return int3( round( GetGlobalCoord3DTransformed( scale, bias ) ) );
}

real2 GetGlobalCoord2DTransformedUNorm (real2 scale, real2 bias)
{
	return ( real2( GetGlobalCoord2D() ) / real2( GetGlobalSize2D() ) ) * scale + bias;
}

real3 GetGlobalCoord3DTransformedUNorm (real3 scale, real3 bias)
{
	return ( real3( GetGlobalCoord3D() ) / real3( GetGlobalSize3D() ) ) * scale + bias;
}

real2 GetGlobalCoord2DTransformedSNorm (real2 scale, real2 bias)
{
	real2	size = real2( GetGlobalSize2D() ) * 0.5;
	return ( (real2( GetGlobalCoord2D() ) - size) / size ) * scale + bias;
}

real3 GetGlobalCoord3DTransformedSNorm (real3 scale, real3 bias)
{
	real3	size = real3( GetGlobalSize3D() ) * 0.5;
	return ( (real3( GetGlobalCoord3D() ) - size) / size ) * scale + bias;
}

real2 GetGlobalCoord2DTransformedUNormCorrected (real scale, real2 bias)
{
	real2	size	= real2( GetGlobalSize2D() );
	real2	aspect	= size.x > size.y ?	real2( 1.0, size.y / size.x ) :
										real2( size.x / size.y, 1.0 );
	return GetGlobalCoord2DTransformedUNorm( real2(scale, scale), bias ) * aspect;
}

real2 GetGlobalCoord2DTransformedSNormCorrected (real scale, real2 bias)
{
	real2	size	= real2( GetGlobalSize2D() );
	real2	aspect	= size.x > size.y ?	real2( 1.0, size.y / size.x ) :
										real2( size.x / size.y, 1.0 );
	return GetGlobalCoord2DTransformedSNorm( real2(scale, scale), bias ) * aspect;
}
